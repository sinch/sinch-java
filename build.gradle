plugins {
    id "java-library"
    id "signing"
    id "maven-publish"
    id "org.openapi.generator" version "4.3.0"
    id "io.freefair.lombok" version "5.3.0"
    id "com.diffplug.spotless" version "5.8.2"
    id 'com.adarshr.test-logger' version "2.1.1"
    id 'me.champeau.mrjar'
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
    mavenLocal()
    jcenter()
}

publishing {
    publications {
        "$project.name"(MavenPublication) {
            from components.java
            pom {
                name = project.name
                description = 'Sinch Java SDK'
                url = 'https://www.sinch.com/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:sinch/sinch-java.git'
                    developerConnection = 'scm:git:git@github.com:sinch/sinch-java.git'
                    url = 'https://github.com/sinch/sinch-java'
                }
                developers {
                    developer {
                        id = 'frekra'
                        name = 'Fredrik Kratzer'
                        email = 'fredrik.kratzer@sinch.com'
                    }
                    developer {
                        id = 'adabia'
                        name = 'Adam BiaÅ‚as'
                        email = 'adam.bialas@sinch.com'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = 'Sinch'
            def repo = isReleaseVersion ? "releases" : "snapshots"
            url = "https://nexus.int.clxnetworks.net/repository/clx-$repo-hosted"
            credentials {
                username = project.findProperty('clxRepoUser')
                password = project.findProperty('clxRepoPassword')
            }
        }
        maven {
            name = 'Sonatype'
            def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = project.findProperty('ossrhUsername')
                password = project.findProperty('ossrhPassword')
            }
        }
    }
}

signing {
    sign publishing.publications.getByName(project.name)
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

dependencies {
    // Required by swagger generated models
    implementation "io.swagger:swagger-annotations:1.5.22"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "org.slf4j:slf4j-api:1.7.30"
    implementation "com.squareup.okhttp3:okhttp:4.9.0"
    compileOnly "org.apache.httpcomponents.client5:httpclient5:5.0.3"

    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    implementation "javax.validation:validation-api:2.0.1.Final"

    testImplementation "com.github.tomakehurst:wiremock-jre8:2.27.2"
    testImplementation "com.squareup.okhttp3:okhttp:4.9.0"
    testImplementation "org.apache.httpcomponents.client5:httpclient5:5.0.3"
    testImplementation "org.assertj:assertj-core:3.19.0"
    testImplementation "org.awaitility:awaitility:4.0.3"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testRuntimeOnly "org.slf4j:slf4j-simple:1.7.30"
    testRuntimeOnly "com.squareup.okhttp3:okhttp:4.9.0"
}

tasks.withType(Test) {
    systemProperties.putAll(
            System.getProperties().findAll { it.key.startsWith("sinch") || it.key == 'ignoreTestTags' }
    )
}

spotless {
    java {
        target project.fileTree(project.projectDir) {
            include 'src/**/*.java'
            exclude 'build/**/*.*'
        }
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
    }
}

multiReleaseJar {
    addLanguageVersion 11
}

test {
    useJUnitPlatform {
        excludeTags getSystemProperties().get('ignoreTestTags') ? 'none()' : 'integrationTest'
    }
}

testJava11() {
    useJUnitPlatform {
        excludeTags getSystemProperties().get('ignoreTestTags') ? 'none()' : 'integrationTest'
    }
}

testlogger {
    showFullStackTraces false
    showStandardStreams true
}

def convApiSwaggerFile = new File("$buildDir/conversation-api.swagger.json")
task getConversationApiSwagger(type: AntDownload) {
    sourceUrl = "https://developers.sinch.com/openapi/5e8c97e796be52003d4ead78"
    target = convApiSwaggerFile
}
tasks.openApiGenerate.dependsOn getConversationApiSwagger

task renameConvApiSwaggerModels(type: Exec) {
    description "Removes the prefixes from the swagger generated models."
    commandLine "./remove_model_prefix.sh", "conversationapi", "Type", "V1"
}
tasks.openApiGenerate.finalizedBy renameConvApiSwaggerModels

openApiGenerate {
    generatorName = "java"
    library = "native"
    inputSpec = convApiSwaggerFile.toString()
    outputDir = "$buildDir/swagger"
    modelPackage = "com.sinch.sdk.model.conversationapi"
    generateModelTests = false
    generateModelDocumentation = false
    modelFilesConstrainedTo = [""]
    configOptions = ['hideGenerationTimestamp': 'true']
}
sourceSets.main.java.srcDir "$buildDir/swagger/src/main/java"
compileJava.dependsOn tasks.openApiGenerate
compileJava11Java.dependsOn tasks.openApiGenerate

class AntDownload extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        println("$sourceUrl -> $target")
        ant.get(src: sourceUrl, dest: target)
    }
}

task printVersionName {
    doLast {
        println project.version
    }
}
